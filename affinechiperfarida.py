# -*- coding: utf-8 -*-
"""AffineChiperFARIDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EMiIuMPX4PFn4IuybnsycRV0_gNgeEh0
"""

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    for i in range(1, m):
        if (a * i) % m == 1:
            return i
    return None

def affine_encrypt(plain_text, a, b):
    cipher_text = ""
    for char in plain_text:
        if char.isalpha():
            if char.isupper():
                cipher_text += chr((a * (ord(char) - 65) + b) % 26 + 65)
            else:
                cipher_text += chr((a * (ord(char) - 97) + b) % 26 + 97)
        else:
            cipher_text += char
    return cipher_text

def affine_decrypt(cipher_text, a, b):
    a_inverse = mod_inverse(a, 26)
    if a_inverse is None:
        raise ValueError("Key 'a' is not invertible for modulus 26.")

    plain_text = ""
    for char in cipher_text:
        if char.isalpha():
            if char.isupper():
                plain_text += chr((a_inverse * (ord(char) - 65 - b)) % 26 + 65)
            else:
                plain_text += chr((a_inverse * (ord(char) - 97 - b)) % 26 + 97)
        else:
            plain_text += char
    return plain_text

def main():
    # Mengambil input dari pengguna
    plaintext = input("Masukkan teks: ")
    a = int(input("Masukkan nilai 'a' (bilangan bulat positif dan relatif prima dengan 26): "))
    b = int(input("Masukkan nilai 'b' (bilangan bulat): "))

    # Memastikan 'a' dan 'b' memenuhi kriteria
    if gcd(a, 26) != 1:
        print("Nilai 'a' harus relatif prima dengan 26.")
        return

    # Mengenkripsi dan mendekripsi teks
    ciphertext = affine_encrypt(plaintext, a, b)
    decrypted_text = affine_decrypt(ciphertext, a, b)

    # Menampilkan hasil
    print(f"\nTeks terenkripsi: {ciphertext}")
    print(f"Teks terdekripsi: {decrypted_text}")

if __name__ == "__main__":
    main()