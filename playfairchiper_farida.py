# -*- coding: utf-8 -*-
"""PlayfairChiper_FARIDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bjA6eYvq-Iy8NkL0wvyFOjrKYS8Qh6Qw
"""

def generate_playfair_key(key):
    # Membuat matriks 5x5 untuk Playfair Cipher
    key_matrix = [['' for _ in range(5)] for _ in range(5)]
    key_chars = set()

    # Menambahkan karakter kunci ke matriks
    i, j = 0, 0
    for char in key:
        if char.isalpha() and char not in key_chars:
            key_matrix[i][j] = char
            key_chars.add(char)
            j += 1
            if j == 5:
                j = 0
                i += 1

    # Menambahkan karakter alfabet yang tidak ada di kunci
    for char in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if char not in key_chars:
            key_matrix[i][j] = char
            j += 1
            if j == 5:
                j = 0
                i += 1

    return key_matrix

def find_char_position(matrix, char):
    # Menemukan posisi karakter dalam matriks Playfair
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return i, j
    return -1, -1

def playfair_encrypt(plain_text, key_matrix):
    encrypted_text = ""

    for i in range(0, len(plain_text), 2):
        char1, char2 = plain_text[i], plain_text[i + 1]

        row1, col1 = find_char_position(key_matrix, char1)
        row2, col2 = find_char_position(key_matrix, char2)

        # Jika karakter berada pada baris atau kolom yang sama
        if row1 == row2:
            encrypted_text += key_matrix[row1][(col1 + 1) % 5] + key_matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:
            encrypted_text += key_matrix[(row1 + 1) % 5][col1] + key_matrix[(row2 + 1) % 5][col2]
        else:
            encrypted_text += key_matrix[row1][col2] + key_matrix[row2][col1]

    return encrypted_text

def playfair_decrypt(encrypted_text, key_matrix):
    decrypted_text = ""

    for i in range(0, len(encrypted_text), 2):
        char1, char2 = encrypted_text[i], encrypted_text[i + 1]

        row1, col1 = find_char_position(key_matrix, char1)
        row2, col2 = find_char_position(key_matrix, char2)

        # Jika karakter berada pada baris atau kolom yang sama
        if row1 == row2:
            decrypted_text += key_matrix[row1][(col1 - 1) % 5] + key_matrix[row2][(col2 - 1) % 5]
        elif col1 == col2:
            decrypted_text += key_matrix[(row1 - 1) % 5][col1] + key_matrix[(row2 - 1) % 5][col2]
        else:
            decrypted_text += key_matrix[row1][col2] + key_matrix[row2][col1]

    return decrypted_text

def main():
    # Mengambil input dari pengguna
    plaintext = input("Masukkan teks: ").upper().replace("J", "I")
    key = input("Masukkan kunci: ").upper().replace("J", "I")

    # Menghasilkan matriks kunci untuk Playfair
    key_matrix = generate_playfair_key(key)

    # Mengenkripsi dan mendekripsi teks
    ciphertext = playfair_encrypt(plaintext, key_matrix)
    decrypted_text = playfair_decrypt(ciphertext, key_matrix)

    # Menampilkan hasil
    print(f"\nTeks terenkripsi: {ciphertext}")
    print(f"Teks terdekripsi: {decrypted_text}")

if __name__ == "__main__":
    main()